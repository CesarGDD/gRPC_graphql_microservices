// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	checkout "graphql_api/protos/checkoutpb"
	shoppingcart "graphql_api/protos/shoppingcartpb"
	"io"
	"strconv"
)

type AddItemInput struct {
	UserID int               `json:"userId"`
	Item   *ProductItemInput `json:"item"`
}

type CartResponse struct {
	Success bool                       `json:"success"`
	Cart    *shoppingcart.ShoppingCart `json:"cart"`
}

type ClearCartInput struct {
	UserID int `json:"userId"`
}

type CreateOrderInput struct {
	UserID     int             `json:"userId"`
	TotalPrice int             `json:"totalPrice"`
	OrderItems []*NewOrderItem `json:"orderItems"`
}

type GetCartInput struct {
	UserID int `json:"userId"`
}

type GetOrderDetailsInput struct {
	OrderID int `json:"orderId"`
}

type GetOrdersDetailsByUserIDInput struct {
	UserID int `json:"userId"`
}

type GetPaymentDetailsInput struct {
	OrderID int `json:"orderId"`
}

type Mutation struct {
}

type NewOrderItem struct {
	ProductID int `json:"productId"`
	Quantity  int `json:"quantity"`
}

type NewProductInput struct {
	Name        string `json:"name"`
	UserID      int    `json:"userId"`
	URL         string `json:"url"`
	Price       int    `json:"price"`
	Description string `json:"description"`
	Title       string `json:"title"`
}

type Order struct {
	OrderDetails *checkout.OrderDetails `json:"orderDetails"`
}

type PaymentDetails struct {
	PaymentMethod string `json:"paymentMethod"`
}

type ProcessPaymentInput struct {
	OrderID       int    `json:"orderId"`
	PaymentMethod string `json:"paymentMethod"`
}

type ProductItemInput struct {
	ProductID int `json:"productId"`
	Quantity  int `json:"quantity"`
}

type Query struct {
}

type RegisterUserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type RemoveItemInput struct {
	UserID    int `json:"userId"`
	ProductID int `json:"productId"`
}

type UpdateItemInput struct {
	UserID int               `json:"userId"`
	Item   *ProductItemInput `json:"item"`
}

type UpdateProductInput struct {
	ProductID   int    `json:"productId"`
	Name        string `json:"name"`
	URL         string `json:"url"`
	Price       int    `json:"price"`
	Description string `json:"description"`
	Title       string `json:"title"`
}

type UpdateUserInput struct {
	UserID   int    `json:"userId"`
	Username string `json:"username"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleCustomer Role = "CUSTOMER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
