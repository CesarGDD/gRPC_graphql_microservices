package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"graphql_api/graph/model"
	checkout "graphql_api/protos/checkoutpb"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProductInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, productID int) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// ProcessPayment is the resolver for the processPayment field.
func (r *mutationResolver) ProcessPayment(ctx context.Context, input model.ProcessPaymentInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: ProcessPayment - processPayment"))
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: RegisterUser - registerUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID int) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// AddItem is the resolver for the addItem field.
func (r *mutationResolver) AddItem(ctx context.Context, input model.AddItemInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: AddItem - addItem"))
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, input model.UpdateItemInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: UpdateItem - updateItem"))
}

// RemoveItem is the resolver for the removeItem field.
func (r *mutationResolver) RemoveItem(ctx context.Context, input model.RemoveItemInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: RemoveItem - removeItem"))
}

// ClearCart is the resolver for the clearCart field.
func (r *mutationResolver) ClearCart(ctx context.Context, input model.ClearCartInput) (*checkout.Response, error) {
	panic(fmt.Errorf("not implemented: ClearCart - clearCart"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
