package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"graphql_api/graph/model"
	"graphql_api/protos/productspb"
	shoppingcart "graphql_api/protos/shoppingcartpb"
	"graphql_api/protos/usermanagementpb"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"google.golang.org/grpc/status"
)

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, productID int) (*productspb.Product, error) {
	fmt.Println("Request to get product:", productID)

	res, err := r.ProductsClient.GetProduct(ctx, &productspb.GetProductRequest{
		ProductId: int32(productID),
	})
	if err != nil {
		fmt.Printf("Error fetching product %d: %v\n", productID, err)
		// Convert gRPC error to GraphQL error
		e, ok := status.FromError(err)
		if ok {
			// gRPC specific error handling
			fmt.Printf("gRPC error status: %v\n", e.Message())
			graphql.AddError(ctx, gqlerror.Errorf("gRPC error: %s", e.Message()))
		} else {
			// General error handling
			fmt.Printf("Non-gRPC error: %v\n", err)
			graphql.AddError(ctx, gqlerror.Errorf("Internal server error: %v", err))
		}
		return nil, gqlerror.Errorf("Failed to fetch product details.")
	}
	if res == nil || res.Product == nil {
		fmt.Printf("No product found for ID %d\n", productID)
		graphql.AddError(ctx, gqlerror.Errorf("No product found with ID %d", productID))
		return nil, gqlerror.Errorf("No product found.")
	}

	fmt.Println("Product retrieved successfully:", res.Product.Product.Name)
	return res.Product.Product, nil
}

// GetProductByName is the resolver for the getProductByName field.
func (r *queryResolver) GetProductByName(ctx context.Context, name string) (*productspb.Product, error) {
	fmt.Println("Request to get product by name:", name)

	res, err := r.ProductsClient.GetProductByName(ctx, &productspb.GetProductByNameRequest{
		Name: name,
	})
	if err != nil {
		fmt.Printf("Error fetching product %s: %v\n", name, err)
		// Convert gRPC error to GraphQL error
		e, ok := status.FromError(err)
		if ok {
			// gRPC specific error handling
			fmt.Printf("gRPC error status: %v\n", e.Message())
			graphql.AddError(ctx, gqlerror.Errorf("gRPC error: %s", e.Message()))
		} else {
			// General error handling
			fmt.Printf("Non-gRPC error: %v\n", err)
			graphql.AddError(ctx, gqlerror.Errorf("Internal server error: %v", err))
		}
		return nil, gqlerror.Errorf("Failed to fetch product details.")
	}
	if res == nil || res.Product == nil {
		fmt.Printf("No product found for ID %s\n", name)
		graphql.AddError(ctx, gqlerror.Errorf("No product found with ID %s", name))
		return nil, gqlerror.Errorf("No product found.")
	}

	fmt.Println("Product retrieved successfully:", res.Product.Product.Name)
	return res.Product.Product, nil
}

// GetProducts is the resolver for the getProducts field.
func (r *queryResolver) GetProducts(ctx context.Context) ([]*productspb.Product, error) {
	fmt.Println("Request to get products:")

	res, err := r.ProductsClient.GetProducts(ctx, &productspb.GetProductsRequest{})
	if err != nil {
		fmt.Printf("Error fetching products %v\n", err)
		// Convert gRPC error to GraphQL error
		e, ok := status.FromError(err)
		if ok {
			// gRPC specific error handling
			fmt.Printf("gRPC error status: %v\n", e.Message())
			graphql.AddError(ctx, gqlerror.Errorf("gRPC error: %s", e.Message()))
		} else {
			// General error handling
			fmt.Printf("Non-gRPC error: %v\n", err)
			graphql.AddError(ctx, gqlerror.Errorf("Internal server error: %v", err))
		}
		return nil, gqlerror.Errorf("Failed to fetch products details.")
	}
	if res == nil || res.Products == nil {
		fmt.Printf("No products found\n")
		graphql.AddError(ctx, gqlerror.Errorf("No products found"))
		return nil, gqlerror.Errorf("No product found.")
	}

	fmt.Println("Products retrieved successfully:")
	return res.Products, nil
}

// GetOrderDetails is the resolver for the getOrderDetails field.
func (r *queryResolver) GetOrderDetails(ctx context.Context, input model.GetOrderDetailsInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetOrderDetails - getOrderDetails"))
}

// GetPaymentDetails is the resolver for the getPaymentDetails field.
func (r *queryResolver) GetPaymentDetails(ctx context.Context, input model.GetPaymentDetailsInput) (*model.PaymentDetails, error) {
	panic(fmt.Errorf("not implemented: GetPaymentDetails - getPaymentDetails"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID int) (*usermanagementpb.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*usermanagementpb.User, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}

// GetUserByUsername is the resolver for the getUserByUsername field.
func (r *queryResolver) GetUserByUsername(ctx context.Context, username string) (*usermanagementpb.User, error) {
	panic(fmt.Errorf("not implemented: GetUserByUsername - getUserByUsername"))
}

// GetCart is the resolver for the getCart field.
func (r *queryResolver) GetCart(ctx context.Context, input model.GetCartInput) (*shoppingcart.ShoppingCart, error) {
	panic(fmt.Errorf("not implemented: GetCart - getCart"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
