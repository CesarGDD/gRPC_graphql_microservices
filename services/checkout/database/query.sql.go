// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const addOrderItem = `-- name: AddOrderItem :exec
INSERT INTO order_items (order_id, product_id, quantity)
VALUES ($1, $2, $3)
`

type AddOrderItemParams struct {
	OrderID   int32
	ProductID int32
	Quantity  int32
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, total_price, status)
VALUES ($1, $2, 'Pending') RETURNING order_id
`

type CreateOrderParams struct {
	UserID     int32
	TotalPrice int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.TotalPrice)
	var order_id int32
	err := row.Scan(&order_id)
	return order_id, err
}

const getOrderDetails = `-- name: GetOrderDetails :one
SELECT order_id, user_id, total_price, status
FROM orders
WHERE order_id = $1
`

func (q *Queries) GetOrderDetails(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderDetails, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT product_id, quantity
FROM order_items
WHERE order_id = $1
`

type GetOrderItemsRow struct {
	ProductID int32
	Quantity  int32
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID int32) ([]GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(&i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentDetails = `-- name: GetPaymentDetails :one
SELECT payment_method
FROM payment
WHERE order_id = $1
`

func (q *Queries) GetPaymentDetails(ctx context.Context, orderID int32) (string, error) {
	row := q.db.QueryRow(ctx, getPaymentDetails, orderID)
	var payment_method string
	err := row.Scan(&payment_method)
	return payment_method, err
}

const recordPaymentTransaction = `-- name: RecordPaymentTransaction :exec
INSERT INTO payment (order_id, payment_method)
VALUES ($1, $2)
`

type RecordPaymentTransactionParams struct {
	OrderID       int32
	PaymentMethod string
}

func (q *Queries) RecordPaymentTransaction(ctx context.Context, arg RecordPaymentTransactionParams) error {
	_, err := q.db.Exec(ctx, recordPaymentTransaction, arg.OrderID, arg.PaymentMethod)
	return err
}
