// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password_hash, role)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Role         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.PasswordHash, arg.Role)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, role FROM users WHERE user_id = $1
`

type GetUserRow struct {
	UserID   int32
	Username string
	Role     string
}

func (q *Queries) GetUser(ctx context.Context, userID int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(&i.UserID, &i.Username, &i.Role)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, role FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	UserID   int32
	Username string
	Role     string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.UserID, &i.Username, &i.Role)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, role FROM users
`

type GetUsersRow struct {
	UserID   int32
	Username string
	Role     string
}

// Get All Users
func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.UserID, &i.Username, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $2, password_hash = $3, role = $4
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID       int32
	Username     string
	PasswordHash string
	Role         string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
	)
	return err
}
